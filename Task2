# Install necessary packages
!pip install tweepy textblob wordcloud matplotlib seaborn

import tweepy
from textblob import TextBlob
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import seaborn as sns
import re
# Clean the tweet text
def clean_text(text):
    text = re.sub(r'RT @\w+: ', '', text)  # Remove retweet mentions
    text = re.sub(r'@[A-Za-z0-9]+', '', text)  # Remove @mentions
    text = re.sub(r'https?://[A-Za-z0-9./]+', '', text)  # Remove URLs
    text = re.sub(r'[^a-zA-Z]', ' ', text)  # Remove special characters and numbers
    text = text.lower()  # Convert to lowercase
    return text

# Get sentiment score using TextBlob
def get_sentiment(text):
    analysis = TextBlob(text)
    return analysis.sentiment.polarity  # Polarity ranges from -1 (negative) to +1 (positive)
# Sample tweet data (Replace with actual tweet data)
sample_data = {
    'Tweet': [
        "I love this product! It's amazing.",
        "Terrible experience with the new update.",
        "The event was just okay, nothing special.",
        "Great customer service and support!",
        "I donâ€™t think this product is worth the money."
    ]
}
tweets_df = pd.DataFrame(sample_data)

# Preprocess tweets and get sentiment scores
tweets_df['Cleaned_Tweet'] = tweets_df['Tweet'].apply(clean_text)
tweets_df['Sentiment'] = tweets_df['Cleaned_Tweet'].apply(get_sentiment)

# Classify sentiment as Positive, Neutral, or Negative
tweets_df['Sentiment_Label'] = tweets_df['Sentiment'].apply(lambda x: 'Positive' if x > 0 else ('Negative' if x < 0 else 'Neutral'))
# Plot sentiment distribution
plt.figure(figsize=(8, 5))
sns.countplot(data=tweets_df, x='Sentiment_Label', palette='viridis')
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Number of Tweets')
plt.show()

# Word Cloud for Positive and Negative Sentiments
positive_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Positive']['Cleaned_Tweet'])
negative_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Negative']['Cleaned_Tweet'])

# Display WordCloud for positive sentiments
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(WordCloud(width=400, height=300, background_color='white').generate(positive_text), interpolation='bilinear')
plt.axis('off')
plt.title('Positive Sentiment Word Cloud')

# Display WordCloud for negative sentiments
plt.subplot(1, 2, 2)
plt.imshow(WordCloud(width=400, height=300, background_color='black').generate(negative_text), interpolation='bilinear')
plt.axis('off')
plt.title('Negative Sentiment Word Cloud')
plt.show()
# Plot sentiment distribution
plt.figure(figsize=(8, 5))
sns.countplot(data=tweets_df, x='Sentiment_Label', palette='viridis')
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Number of Tweets')
plt.show()

# Word Cloud for Positive and Negative Sentiments
positive_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Positive']['Cleaned_Tweet'])
negative_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Negative']['Cleaned_Tweet'])

# Display WordCloud for positive sentiments
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(WordCloud(width=400, height=300, background_color='white').generate(positive_text), interpolation='bilinear')
plt.axis('off')
plt.title('Positive Sentiment Word Cloud')

# Display WordCloud for negative sentiments
plt.subplot(1, 2, 2)
plt.imshow(WordCloud(width=400, height=300, background_color='black').generate(negative_text), interpolation='bilinear')
plt.axis('off')
plt.title('Negative Sentiment Word Cloud')
plt.show()
# Plot sentiment distribution
plt.figure(figsize=(8, 5))
sns.countplot(data=tweets_df, x='Sentiment_Label', palette='viridis')
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Number of Tweets')
plt.show()

# Word Cloud for Positive and Negative Sentiments
positive_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Positive']['Cleaned_Tweet'])
negative_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Negative']['Cleaned_Tweet'])

# Display WordCloud for positive sentiments
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(WordCloud(width=400, height=300, background_color='white').generate(positive_text), interpolation='bilinear')
plt.axis('off')
plt.title('Positive Sentiment Word Cloud')

# Display WordCloud for negative sentiments
plt.subplot(1, 2, 2)
plt.imshow(WordCloud(width=400, height=300, background_color='black').generate(negative_text), interpolation='bilinear')
plt.axis('off')
plt.title('Negative Sentiment Word Cloud')
plt.show()
# Plot sentiment distribution
plt.figure(figsize=(8, 5))
sns.countplot(data=tweets_df, x='Sentiment_Label', palette='viridis')
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Number of Tweets')
plt.show()

# Word Cloud for Positive and Negative Sentiments
positive_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Positive']['Cleaned_Tweet'])
negative_text = ' '.join(tweets_df[tweets_df['Sentiment_Label'] == 'Negative']['Cleaned_Tweet'])

# Display WordCloud for positive sentiments
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(WordCloud(width=400, height=300, background_color='white').generate(positive_text), interpolation='bilinear')
plt.axis('off')
plt.title('Positive Sentiment Word Cloud')

# Display WordCloud for negative sentiments
plt.subplot(1, 2, 2)
plt.imshow(WordCloud(width=400, height=300, background_color='black').generate(negative_text), interpolation='bilinear')
plt.axis('off')
plt.title('Negative Sentiment Word Cloud')
plt.show()
